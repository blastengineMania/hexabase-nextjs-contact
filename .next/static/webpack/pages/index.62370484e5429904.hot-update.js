"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "../../Code/Hexabase/hexabase-js/dist/lib/packages/item/index.js":
/*!***********************************************************************!*\
  !*** ../../Code/Hexabase/hexabase-js/dist/lib/packages/item/index.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst HxbAbstract_1 = __webpack_require__(/*! ../../../HxbAbstract */ \"../../Code/Hexabase/hexabase-js/dist/HxbAbstract.js\");\nconst item_1 = __webpack_require__(/*! ../../graphql/item */ \"../../Code/Hexabase/hexabase-js/dist/lib/graphql/item.js\");\nconst itemHistory_1 = __importDefault(__webpack_require__(/*! ../itemHistory */ \"../../Code/Hexabase/hexabase-js/dist/lib/packages/itemHistory/index.js\"));\nconst itemAction_1 = __importDefault(__webpack_require__(/*! ../itemAction */ \"../../Code/Hexabase/hexabase-js/dist/lib/packages/itemAction/index.js\"));\nconst itemStatus_1 = __importDefault(__webpack_require__(/*! ../itemStatus */ \"../../Code/Hexabase/hexabase-js/dist/lib/packages/itemStatus/index.js\"));\nconst statusAction_1 = __importDefault(__webpack_require__(/*! ../statusAction */ \"../../Code/Hexabase/hexabase-js/dist/lib/packages/statusAction/index.js\"));\nconst linkItem_1 = __importDefault(__webpack_require__(/*! ../linkItem */ \"../../Code/Hexabase/hexabase-js/dist/lib/packages/linkItem/index.js\"));\nconst fileObject_1 = __importDefault(__webpack_require__(/*! ../fileObject */ \"../../Code/Hexabase/hexabase-js/dist/lib/packages/fileObject/index.js\"));\nconst field_1 = __webpack_require__(/*! ../../../lib/types/field */ \"../../Code/Hexabase/hexabase-js/dist/lib/types/field/index.js\");\nclass Item extends HxbAbstract_1.HxbAbstract {\n    constructor() {\n        super(...arguments);\n        this.fields = {};\n        this.actions = [];\n        this.statuses = [];\n        this.statusActions = [];\n        this._existAttachment = false;\n        this._linkItems = [];\n        this._unlinkItems = [];\n        this._detail = false;\n        this.ignoreFieldUpdate = false;\n    }\n    set(key, value) {\n        switch (key) {\n            case 'datastore':\n                this.datastore = value;\n                break;\n            case 'd_id':\n                break;\n            case 'links': {\n                const project = this.datastore.project;\n                value.forEach(params => {\n                    const datasstore = project.datastoreSync(params.d_id);\n                    params.i_ids\n                        .forEach(i_id => {\n                        const linkedItem = Item.fromJson({ datastore: datasstore, i_id: i_id });\n                        this._linkItems.push(new linkItem_1.default({ item: this, linkedItem, saved: true }));\n                    });\n                });\n                break;\n            }\n            case 'item_links': {\n                if (value.item_count === 0)\n                    break;\n                const project = this.datastore.project;\n                value.links.forEach(params => {\n                    const datastore = project.datastoreSync(params.d_id);\n                    params.items.forEach(itemParams => {\n                        const linkedItem = Item.fromJson({ datastore, i_id: itemParams.i_id });\n                        this._linkItems.push(new linkItem_1.default({ item: this, linkedItem, saved: true }));\n                    });\n                });\n                break;\n            }\n            case 'pinned':\n                this.pinned = value;\n                break;\n            case 'a_id':\n            case 'p_id':\n                break;\n            case 'created_at':\n                this.createdAt = new Date(value);\n                break;\n            case 'updated_at':\n                this.updatedAt = new Date(value);\n                break;\n            case 'rev_no':\n                this.revNo = value;\n                break;\n            case 'unread':\n                this.unread = value;\n                break;\n            case 'w_id':\n                break;\n            case 'i_id':\n                if (value) {\n                    this.id = value;\n                }\n                break;\n            case 'seed_i_id':\n                this.seedItemId = value;\n                break;\n            case 'Status':\n                this.statusLabel = value;\n                break;\n            case 'status_id':\n                this.statusId = value;\n                break;\n            case 'title':\n                this.title = value;\n                break;\n            case 'created_by':\n                this.createdBy = value;\n                break;\n            case 'updated_by':\n                this.updatedBy = value;\n                break;\n            case 'lookup_items':\n                break;\n            case 'item_actions':\n                this.actions = Object.keys(value)\n                    .map((display_id) => itemAction_1.default\n                    .fromJson(Object.assign(Object.assign({ display_id }, value[display_id]), { item: this })));\n                break;\n            case 'status_list':\n                this.statuses = Object.keys(value)\n                    .map((display_id) => itemStatus_1.default\n                    .fromJson(Object.assign(Object.assign({ display_id }, value[display_id]), { item: this })));\n                break;\n            case 'status_actions':\n                this.statusActions = Object.keys(value)\n                    .map((display_id) => statusAction_1.default\n                    .fromJson(Object.assign(Object.assign({ display_id }, value[display_id]), { item: this })));\n                break;\n            case 'status_order':\n                this.statusOrder = value;\n                break;\n            case 'status_action_order':\n                this.statusActionOrder = value;\n                break;\n            case 'item_action_order':\n                this.itemActionOrder = value;\n                break;\n            case 'field_values':\n                Object.keys(value).forEach(fieldName => {\n                    const val = value[fieldName];\n                    if (val.dataType === field_1.DataType.DSLOOKUP && val.value) {\n                        const datastore = this.datastore.project.datastoreSync(val.value.d_id);\n                        const params = val.value.lookup_item;\n                        params.datastore = datastore;\n                        const item = Item.fromJson(params);\n                        this.fields[fieldName] = item;\n                    }\n                    else {\n                        this.setFieldValue(fieldName, val.value);\n                    }\n                });\n                break;\n            default:\n                this.setFieldValue(key, value);\n                break;\n        }\n        return this;\n    }\n    add(fieldName, value) {\n        if (Array.isArray(value))\n            return this.addAll(fieldName, value);\n        if (this.ignoreFieldUpdate)\n            return this;\n        const field = this.datastore.fieldSync(fieldName);\n        if (!field.valid(value)) {\n            throw new Error(`Invalid value ${value} for field key ${field.name}`);\n        }\n        if (this.fields[fieldName]) {\n            this.fields[fieldName].push(field.value(value, { item: this })[0]);\n        }\n        else {\n            this.fields[fieldName] = [field.value(value, { item: this })];\n        }\n        return this;\n    }\n    addAll(fieldName, values) {\n        values.forEach(value => this.add(fieldName, value));\n        return this;\n    }\n    setFieldValue(fieldName, value) {\n        if (this.ignoreFieldUpdate)\n            return this;\n        const field = this.datastore.fieldSync(fieldName);\n        if (!field.valid(value)) {\n            throw new Error(`Invalid value ${value} for field key ${field.name}`);\n        }\n        value = field.value(value, { item: this });\n        if (field.dataType.toLocaleLowerCase() === 'status') {\n            this._status = value;\n        }\n        this.fields[field.displayId] = value;\n        return this;\n    }\n    get(name, defaultValue) {\n        const value = this.fields[name] && this.fields[name].field ? this.fields[name].value : this.fields[name];\n        if (value === undefined || value === null && defaultValue) {\n            return defaultValue;\n        }\n        if (!value)\n            return undefined;\n        return value;\n    }\n    static all(params, datastore) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const payload = {\n                getItemsParameters: params,\n                datastoreId: datastore.id,\n                projectId: datastore.project.id,\n            };\n            payload.getItemsParameters.return_number_value = true;\n            payload.getItemsParameters.include_links = true;\n            payload.getItemsParameters.format = 'map';\n            const res = yield Item.request(item_1.DS_ITEMS, payload);\n            for (const item of res.datastoreGetDatastoreItems.items) {\n                if (!item.item_links || !item.item_links.links || item.item_links.length === 0)\n                    continue;\n                for (const link of item.item_links.links) {\n                    if (!link.d_id)\n                        continue;\n                    const d = yield datastore.project.datastore(link.d_id);\n                    yield d.fields();\n                }\n            }\n            const items = res.datastoreGetDatastoreItems.items\n                .map((params) => Item.fromJson(Object.assign({ datastore }, params)));\n            const totalCount = res.datastoreGetDatastoreItems.totalItems;\n            return {\n                totalCount, items,\n            };\n        });\n    }\n    static search(payload, datastore) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof payload.page === 'undefined')\n                payload.page = 1;\n            if (typeof payload.per_page === 'undefined')\n                payload.per_page = 100;\n            payload.include_lookups = true;\n            payload.include_links = true;\n            payload.return_number_value = true;\n            payload.include_fields_data = true;\n            payload.format = 'map';\n            const res = yield this.request(item_1.ITEM_WITH_SEARCH, { payload });\n            return res.itemWithSearch.items.map((params) => Item.fromJson(Object.assign({ datastore }, params)));\n        });\n    }\n    static searchWithCount(payload, datastore) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof payload.page === 'undefined')\n                payload.page = 1;\n            if (typeof payload.per_page === 'undefined')\n                payload.per_page = 100;\n            payload.include_lookups = true;\n            payload.include_links = true;\n            payload.return_number_value = true;\n            payload.include_fields_data = true;\n            payload.format = 'map';\n            payload.use_display_id = true;\n            payload.datastore_id = datastore.id;\n            payload.project_id = datastore.project.id;\n            const res = yield this.request(item_1.ITEM_WITH_SEARCH, { payload });\n            const items = res.itemWithSearch.items.map((params) => Item.fromJson(Object.assign({ datastore }, params)));\n            const totalCount = res.itemWithSearch.totalItems;\n            return {\n                totalCount, items,\n            };\n        });\n    }\n    static createItemId(datastore) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const res = yield this.request(item_1.CREATE_ITEMID, { datastoreId: datastore.id });\n            return res.datastoreCreateItemID.item_id;\n        });\n    }\n    static delete(conditions, datasstore) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                projectId: datasstore.project.id,\n                datastoreId: datasstore.id,\n                deleteItemsParameters: {\n                    use_display_id: true,\n                    conditions,\n                }\n            };\n            const res = yield this.request(item_1.DELETE_ITEMS, params);\n            return res.datastoreDeleteDatastoreItems.success;\n        });\n    }\n    save(comment, actionName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield (!this.id ? this.create(actionName) : this.update(comment, actionName));\n            yield this.fetch();\n            yield Promise.all(this._linkItems.map(linkItem => linkItem.create()));\n            yield Promise.all(this._unlinkItems.map(linkItem => linkItem.delete()));\n            this._linkItems = [];\n            this._unlinkItems = [];\n            return true;\n        });\n    }\n    link(item) {\n        this._linkItems.push(new linkItem_1.default({ item: this, linkedItem: item }));\n        return this;\n    }\n    unlink(item) {\n        this._unlinkItems.push(new linkItem_1.default({ item: this, linkedItem: item }));\n        return this;\n    }\n    create(actionName = 'CreateItem') {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.datastore)\n                throw new Error('Datastore is required');\n            const action = yield this.actionOrStatusAction(actionName);\n            const payload = {\n                action_id: action && action.id,\n                return_item_result: true,\n                is_notify_to_sender: true,\n                ensure_transaction: false,\n                exec_children_post_procs: true,\n                item: yield this.toJson(),\n            };\n            const res = yield this.request(item_1.CREATE_NEW_ITEM, {\n                projectId: this.datastore.project.id,\n                datastoreId: this.datastore.id,\n                payload,\n            });\n            if (this.datastore._fields.length === 0)\n                yield this.datastore.fields();\n            const params = {};\n            Object.keys(res.datastoreCreateNewItem.item).forEach((id) => {\n                const field = this.datastore._fields.find((f) => f.id === id || f.displayId === id);\n                if (!field) {\n                    params[id] = res.datastoreCreateNewItem.item[id];\n                }\n                else {\n                    params[field.displayId] = res.datastoreCreateNewItem.item[id];\n                }\n            });\n            for (const key in params) {\n                if (!params[key].d_id)\n                    continue;\n                const datastore = this.datastore.project.datastoreSync(params[key].d_id);\n                if (datastore) {\n                    params[key] = yield datastore.item(params[key].item_id);\n                }\n            }\n            this.sets(params);\n            this._setStatus(this._status);\n            if (this._existAttachment) {\n                yield this.update();\n                this._existAttachment = false;\n            }\n            return true;\n        });\n    }\n    execute(actionName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const action = yield this.actionOrStatusAction(actionName);\n            if (!action)\n                throw new Error(`Action ${actionName} not found`);\n            const params = {\n                rev_no: this.revNo,\n                datastore_id: this.datastore.id,\n                action_id: action && action.id,\n                is_notify_to_sender: true,\n                ensure_transaction: true,\n                exec_children_post_procs: true,\n                return_item_result: true,\n                item: yield this.toJson(),\n            };\n            const res = yield this.request(item_1.EXECUTE_ITEM_ACTION, {\n                actionId: action.id,\n                datastoreId: this.datastore.id,\n                itemId: this.id,\n                projectId: this.datastore.project.id,\n                itemActionParameters: params\n            });\n            this.sets(res.datastoreExecuteItemAction.item);\n            this._setStatus(this._status);\n            return true;\n        });\n    }\n    actionOrStatusAction(actionName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const action = yield this.action(actionName);\n            if (action)\n                return action;\n            console.log(this.statusActions);\n            const statusAction = this.statusActions.find(a => a.displayId === actionName || a.id === actionName || a.name === actionName);\n            return statusAction;\n        });\n    }\n    update(comment, actionName = 'UpdateItem') {\n        return __awaiter(this, void 0, void 0, function* () {\n            const action = yield this.actionOrStatusAction(actionName);\n            const params = {\n                rev_no: this.revNo,\n                datastore_id: this.datastore.id,\n                action_id: action && action.id,\n                is_notify_to_sender: true,\n                ensure_transaction: true,\n                exec_children_post_procs: true,\n                return_item_result: true,\n                item: yield this.toJson(),\n            };\n            if (comment) {\n                params.history = {\n                    comment,\n                    datastore_id: this.datastore.id,\n                };\n            }\n            const res = yield this.request(item_1.DATASTORE_UPDATE_ITEM, {\n                datastoreId: this.datastore.id,\n                itemId: this.id,\n                projectId: this.datastore.project.id,\n                itemActionParameters: params\n            });\n            this.sets(res.datastoreUpdateItem.item);\n            this._setStatus(this._status);\n            return true;\n        });\n    }\n    toJson() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const json = {};\n            for (const key in this.fields) {\n                const field = this.datastore.fieldSync(key);\n                if (!field)\n                    throw new Error(`Field ${key} is not found`);\n                if (!this.id && field.dataType === field_1.DataType.FILE && this.fields[key] && this.fields[key].length > 0) {\n                    const files = this.fields[key];\n                    const file = files.find(f => !f.id);\n                    if (file) {\n                        this._existAttachment = true;\n                        continue;\n                    }\n                }\n                const value = yield field.convert(this.fields[key]);\n                if (typeof value !== 'undefined' && this.fields[key]) {\n                    json[key] = value;\n                }\n            }\n            return json;\n        });\n    }\n    status(status) {\n        if (status) {\n            const statusAction = this.statusActions.find(action => action.displayId === status);\n            if (!statusAction)\n                throw new Error('Status action is not found');\n            this._updateStatusAction = statusAction;\n            const newStatus = this.statuses.find(s => s.id === statusAction.nextStatusId);\n            if (!newStatus)\n                throw new Error(`Status is not found ${statusAction.nextStatusId}`);\n            this._setStatus(newStatus);\n        }\n        return this._status.displayId;\n    }\n    fetch() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                datastoreId: this.datastore.id,\n                itemId: this.id,\n                projectId: this.datastore.project.id,\n                datastoreItemDetailParams: {\n                    include_lookups: true,\n                    use_display_id: true,\n                    return_number_value: true,\n                    format: 'map',\n                    include_linked_items: true,\n                },\n            };\n            const res = yield this.request(item_1.ITEM_DETAIL, params);\n            for (const key in res.getDatastoreItemDetails.field_values) {\n                const field = res.getDatastoreItemDetails.field_values[key];\n                if (field.dataType !== 'dslookup' || !field.value)\n                    continue;\n                yield this.datastore.project.datastore(field.value.d_id);\n            }\n            this.sets(res.getDatastoreItemDetails);\n            this._setStatus(this._status);\n            return true;\n        });\n    }\n    delete() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const action = yield this.action('DeleteItem');\n            const params = {\n                a_id: action.id,\n            };\n            const res = yield this.request(item_1.DELETE_ITEM, {\n                datastoreId: this.datastore.id,\n                itemId: this.id,\n                projectId: this.datastore.project.id,\n                deleteItemReq: params,\n            });\n            return !res.datastoreDeleteItem.error;\n        });\n    }\n    action(actionName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.actions.length === 0) {\n                this.ignoreFieldUpdate = true;\n                yield this.fetch();\n                this.ignoreFieldUpdate = false;\n            }\n            return this.actions.find(a => a.displayId.trim().toLowerCase() === actionName.trim().toLocaleLowerCase());\n        });\n    }\n    comment() {\n        return new itemHistory_1.default({ item: this });\n    }\n    _setStatus(status) {\n        if (this.statuses.length === 0)\n            return;\n        if (typeof status === 'string') {\n            const statusName = Object.keys(this.fields).find(fieldName => this.datastore.fieldSync(fieldName).dataType === 'status');\n            if (statusName) {\n                this._status = this.statuses.find(status => status.id === this.fields[statusName]);\n            }\n            delete this.fields[statusName];\n        }\n        else {\n            this._status = status;\n        }\n    }\n    histories(getHistoryParamQueries) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const res = yield this.historiesWithUnread();\n            return res.histories;\n        });\n    }\n    historiesWithUnread(getHistoryParamQueries) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                projectId: this.datastore.project.id,\n                datastoreId: this.datastore.id,\n                itemId: this.id,\n                getHistoryParamQueries,\n            };\n            const res = yield this.request(item_1.ITEM_HISTORIES, params);\n            const histories = res.getHistories.histories\n                .map((history) => itemHistory_1.default.fromJson(Object.assign({ item: this }, history)));\n            return {\n                unread: res.getHistories.unread,\n                histories,\n            };\n        });\n    }\n    links(linkedDatastore) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const res = yield this.request(item_1.ITEM_LINKED, {\n                datastoreId: this.datastore.id,\n                itemId: this.id,\n                linkedDatastoreId: typeof linkedDatastore === 'string' ? linkedDatastore : linkedDatastore.id,\n            });\n            if (res.datastoreGetLinkedItems.items.length === 0)\n                return [];\n            const projects = yield Item.client.currentWorkspace.projects();\n            const items = [];\n            for (const params of res.datastoreGetLinkedItems.items) {\n                const project = projects.find(p => p.id === params.p_id);\n                const datastore = typeof linkedDatastore === 'string' ? yield project.datastore(params.d_id) : linkedDatastore;\n                items.push(yield datastore.item(params.i_id));\n            }\n            yield Promise.all(items.map((item) => item.fetch()));\n            return items;\n        });\n    }\n    file() {\n        return new fileObject_1.default({ item: this });\n    }\n}\nexports[\"default\"] = Item;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vQ29kZS9IZXhhYmFzZS9oZXhhYmFzZS1qcy9kaXN0L2xpYi9wYWNrYWdlcy9pdGVtL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw0QkFBNEIsK0RBQStELGlCQUFpQjtBQUM1RztBQUNBLG9DQUFvQyxNQUFNLCtCQUErQixZQUFZO0FBQ3JGLG1DQUFtQyxNQUFNLG1DQUFtQyxZQUFZO0FBQ3hGLGdDQUFnQztBQUNoQztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQixtQkFBTyxDQUFDLGlGQUFzQjtBQUNwRCxlQUFlLG1CQUFPLENBQUMsb0ZBQW9CO0FBQzNDLHNDQUFzQyxtQkFBTyxDQUFDLDhGQUFnQjtBQUM5RCxxQ0FBcUMsbUJBQU8sQ0FBQyw0RkFBZTtBQUM1RCxxQ0FBcUMsbUJBQU8sQ0FBQyw0RkFBZTtBQUM1RCx1Q0FBdUMsbUJBQU8sQ0FBQyxnR0FBaUI7QUFDaEUsbUNBQW1DLG1CQUFPLENBQUMsd0ZBQWE7QUFDeEQscUNBQXFDLG1CQUFPLENBQUMsNEZBQWU7QUFDNUQsZ0JBQWdCLG1CQUFPLENBQUMsK0ZBQTBCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsbUNBQW1DO0FBQzlGLHNFQUFzRSxxQ0FBcUM7QUFDM0cscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsa0NBQWtDO0FBQzdGLHNFQUFzRSxxQ0FBcUM7QUFDM0cscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELFlBQVksd0JBQXdCLFlBQVk7QUFDNUc7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsWUFBWSx3QkFBd0IsWUFBWTtBQUM1RztBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxZQUFZLHdCQUF3QixZQUFZO0FBQzVHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxPQUFPLGdCQUFnQixXQUFXO0FBQy9FO0FBQ0E7QUFDQSw2REFBNkQsWUFBWTtBQUN6RTtBQUNBO0FBQ0EsMkRBQTJELFlBQVk7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLE9BQU8sZ0JBQWdCLFdBQVc7QUFDL0U7QUFDQSxxQ0FBcUMsWUFBWTtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCxXQUFXO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNFQUFzRSxTQUFTO0FBQy9FLDBGQUEwRixXQUFXO0FBQ3JHLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0UsU0FBUztBQUMvRSxpR0FBaUcsV0FBVztBQUM1RztBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxtRUFBbUUsMkJBQTJCO0FBQzlGO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxzREFBc0QsOEJBQThCO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCw4QkFBOEI7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxZQUFZO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLEtBQUs7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsMEJBQTBCO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsMkNBQTJDLFlBQVk7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRixZQUFZO0FBQzdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLDBDQUEwQyxZQUFZO0FBQ3REO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9Db2RlL0hleGFiYXNlL2hleGFiYXNlLWpzL2Rpc3QvbGliL3BhY2thZ2VzL2l0ZW0vaW5kZXguanM/MGMyZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgSHhiQWJzdHJhY3RfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9IeGJBYnN0cmFjdFwiKTtcbmNvbnN0IGl0ZW1fMSA9IHJlcXVpcmUoXCIuLi8uLi9ncmFwaHFsL2l0ZW1cIik7XG5jb25zdCBpdGVtSGlzdG9yeV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9pdGVtSGlzdG9yeVwiKSk7XG5jb25zdCBpdGVtQWN0aW9uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2l0ZW1BY3Rpb25cIikpO1xuY29uc3QgaXRlbVN0YXR1c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9pdGVtU3RhdHVzXCIpKTtcbmNvbnN0IHN0YXR1c0FjdGlvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9zdGF0dXNBY3Rpb25cIikpO1xuY29uc3QgbGlua0l0ZW1fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vbGlua0l0ZW1cIikpO1xuY29uc3QgZmlsZU9iamVjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9maWxlT2JqZWN0XCIpKTtcbmNvbnN0IGZpZWxkXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vbGliL3R5cGVzL2ZpZWxkXCIpO1xuY2xhc3MgSXRlbSBleHRlbmRzIEh4YkFic3RyYWN0XzEuSHhiQWJzdHJhY3Qge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmZpZWxkcyA9IHt9O1xuICAgICAgICB0aGlzLmFjdGlvbnMgPSBbXTtcbiAgICAgICAgdGhpcy5zdGF0dXNlcyA9IFtdO1xuICAgICAgICB0aGlzLnN0YXR1c0FjdGlvbnMgPSBbXTtcbiAgICAgICAgdGhpcy5fZXhpc3RBdHRhY2htZW50ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2xpbmtJdGVtcyA9IFtdO1xuICAgICAgICB0aGlzLl91bmxpbmtJdGVtcyA9IFtdO1xuICAgICAgICB0aGlzLl9kZXRhaWwgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pZ25vcmVGaWVsZFVwZGF0ZSA9IGZhbHNlO1xuICAgIH1cbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAnZGF0YXN0b3JlJzpcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFzdG9yZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZF9pZCc6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdsaW5rcyc6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9qZWN0ID0gdGhpcy5kYXRhc3RvcmUucHJvamVjdDtcbiAgICAgICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKHBhcmFtcyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFzc3RvcmUgPSBwcm9qZWN0LmRhdGFzdG9yZVN5bmMocGFyYW1zLmRfaWQpO1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXMuaV9pZHNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKGlfaWQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGlua2VkSXRlbSA9IEl0ZW0uZnJvbUpzb24oeyBkYXRhc3RvcmU6IGRhdGFzc3RvcmUsIGlfaWQ6IGlfaWQgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9saW5rSXRlbXMucHVzaChuZXcgbGlua0l0ZW1fMS5kZWZhdWx0KHsgaXRlbTogdGhpcywgbGlua2VkSXRlbSwgc2F2ZWQ6IHRydWUgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2l0ZW1fbGlua3MnOiB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLml0ZW1fY291bnQgPT09IDApXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb2plY3QgPSB0aGlzLmRhdGFzdG9yZS5wcm9qZWN0O1xuICAgICAgICAgICAgICAgIHZhbHVlLmxpbmtzLmZvckVhY2gocGFyYW1zID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YXN0b3JlID0gcHJvamVjdC5kYXRhc3RvcmVTeW5jKHBhcmFtcy5kX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLml0ZW1zLmZvckVhY2goaXRlbVBhcmFtcyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5rZWRJdGVtID0gSXRlbS5mcm9tSnNvbih7IGRhdGFzdG9yZSwgaV9pZDogaXRlbVBhcmFtcy5pX2lkIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGlua0l0ZW1zLnB1c2gobmV3IGxpbmtJdGVtXzEuZGVmYXVsdCh7IGl0ZW06IHRoaXMsIGxpbmtlZEl0ZW0sIHNhdmVkOiB0cnVlIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdwaW5uZWQnOlxuICAgICAgICAgICAgICAgIHRoaXMucGlubmVkID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdhX2lkJzpcbiAgICAgICAgICAgIGNhc2UgJ3BfaWQnOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY3JlYXRlZF9hdCc6XG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVkQXQgPSBuZXcgRGF0ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd1cGRhdGVkX2F0JzpcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZWRBdCA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3Jldl9ubyc6XG4gICAgICAgICAgICAgICAgdGhpcy5yZXZObyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndW5yZWFkJzpcbiAgICAgICAgICAgICAgICB0aGlzLnVucmVhZCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnd19pZCc6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdpX2lkJzpcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pZCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NlZWRfaV9pZCc6XG4gICAgICAgICAgICAgICAgdGhpcy5zZWVkSXRlbUlkID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdTdGF0dXMnOlxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzTGFiZWwgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3N0YXR1c19pZCc6XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0dXNJZCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndGl0bGUnOlxuICAgICAgICAgICAgICAgIHRoaXMudGl0bGUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NyZWF0ZWRfYnknOlxuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlZEJ5ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd1cGRhdGVkX2J5JzpcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZWRCeSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbG9va3VwX2l0ZW1zJzpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2l0ZW1fYWN0aW9ucyc6XG4gICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gT2JqZWN0LmtleXModmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKGRpc3BsYXlfaWQpID0+IGl0ZW1BY3Rpb25fMS5kZWZhdWx0XG4gICAgICAgICAgICAgICAgICAgIC5mcm9tSnNvbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBkaXNwbGF5X2lkIH0sIHZhbHVlW2Rpc3BsYXlfaWRdKSwgeyBpdGVtOiB0aGlzIH0pKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzdGF0dXNfbGlzdCc6XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0dXNlcyA9IE9iamVjdC5rZXlzKHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAubWFwKChkaXNwbGF5X2lkKSA9PiBpdGVtU3RhdHVzXzEuZGVmYXVsdFxuICAgICAgICAgICAgICAgICAgICAuZnJvbUpzb24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgZGlzcGxheV9pZCB9LCB2YWx1ZVtkaXNwbGF5X2lkXSksIHsgaXRlbTogdGhpcyB9KSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc3RhdHVzX2FjdGlvbnMnOlxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzQWN0aW9ucyA9IE9iamVjdC5rZXlzKHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAubWFwKChkaXNwbGF5X2lkKSA9PiBzdGF0dXNBY3Rpb25fMS5kZWZhdWx0XG4gICAgICAgICAgICAgICAgICAgIC5mcm9tSnNvbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBkaXNwbGF5X2lkIH0sIHZhbHVlW2Rpc3BsYXlfaWRdKSwgeyBpdGVtOiB0aGlzIH0pKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzdGF0dXNfb3JkZXInOlxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzT3JkZXIgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3N0YXR1c19hY3Rpb25fb3JkZXInOlxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzQWN0aW9uT3JkZXIgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2l0ZW1fYWN0aW9uX29yZGVyJzpcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1BY3Rpb25PcmRlciA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZmllbGRfdmFsdWVzJzpcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh2YWx1ZSkuZm9yRWFjaChmaWVsZE5hbWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWwgPSB2YWx1ZVtmaWVsZE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsLmRhdGFUeXBlID09PSBmaWVsZF8xLkRhdGFUeXBlLkRTTE9PS1VQICYmIHZhbC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YXN0b3JlID0gdGhpcy5kYXRhc3RvcmUucHJvamVjdC5kYXRhc3RvcmVTeW5jKHZhbC52YWx1ZS5kX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHZhbC52YWx1ZS5sb29rdXBfaXRlbTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5kYXRhc3RvcmUgPSBkYXRhc3RvcmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gSXRlbS5mcm9tSnNvbihwYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWVsZHNbZmllbGROYW1lXSA9IGl0ZW07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEZpZWxkVmFsdWUoZmllbGROYW1lLCB2YWwudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RmllbGRWYWx1ZShrZXksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgYWRkKGZpZWxkTmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkQWxsKGZpZWxkTmFtZSwgdmFsdWUpO1xuICAgICAgICBpZiAodGhpcy5pZ25vcmVGaWVsZFVwZGF0ZSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBjb25zdCBmaWVsZCA9IHRoaXMuZGF0YXN0b3JlLmZpZWxkU3luYyhmaWVsZE5hbWUpO1xuICAgICAgICBpZiAoIWZpZWxkLnZhbGlkKHZhbHVlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHZhbHVlICR7dmFsdWV9IGZvciBmaWVsZCBrZXkgJHtmaWVsZC5uYW1lfWApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmZpZWxkc1tmaWVsZE5hbWVdKSB7XG4gICAgICAgICAgICB0aGlzLmZpZWxkc1tmaWVsZE5hbWVdLnB1c2goZmllbGQudmFsdWUodmFsdWUsIHsgaXRlbTogdGhpcyB9KVswXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmZpZWxkc1tmaWVsZE5hbWVdID0gW2ZpZWxkLnZhbHVlKHZhbHVlLCB7IGl0ZW06IHRoaXMgfSldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBhZGRBbGwoZmllbGROYW1lLCB2YWx1ZXMpIHtcbiAgICAgICAgdmFsdWVzLmZvckVhY2godmFsdWUgPT4gdGhpcy5hZGQoZmllbGROYW1lLCB2YWx1ZSkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0RmllbGRWYWx1ZShmaWVsZE5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmlnbm9yZUZpZWxkVXBkYXRlKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gdGhpcy5kYXRhc3RvcmUuZmllbGRTeW5jKGZpZWxkTmFtZSk7XG4gICAgICAgIGlmICghZmllbGQudmFsaWQodmFsdWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdmFsdWUgJHt2YWx1ZX0gZm9yIGZpZWxkIGtleSAke2ZpZWxkLm5hbWV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSBmaWVsZC52YWx1ZSh2YWx1ZSwgeyBpdGVtOiB0aGlzIH0pO1xuICAgICAgICBpZiAoZmllbGQuZGF0YVR5cGUudG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gJ3N0YXR1cycpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXR1cyA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZmllbGRzW2ZpZWxkLmRpc3BsYXlJZF0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGdldChuYW1lLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmZpZWxkc1tuYW1lXSAmJiB0aGlzLmZpZWxkc1tuYW1lXS5maWVsZCA/IHRoaXMuZmllbGRzW25hbWVdLnZhbHVlIDogdGhpcy5maWVsZHNbbmFtZV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsICYmIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXZhbHVlKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBzdGF0aWMgYWxsKHBhcmFtcywgZGF0YXN0b3JlKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgICAgICAgICAgIGdldEl0ZW1zUGFyYW1ldGVyczogcGFyYW1zLFxuICAgICAgICAgICAgICAgIGRhdGFzdG9yZUlkOiBkYXRhc3RvcmUuaWQsXG4gICAgICAgICAgICAgICAgcHJvamVjdElkOiBkYXRhc3RvcmUucHJvamVjdC5pZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBwYXlsb2FkLmdldEl0ZW1zUGFyYW1ldGVycy5yZXR1cm5fbnVtYmVyX3ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgIHBheWxvYWQuZ2V0SXRlbXNQYXJhbWV0ZXJzLmluY2x1ZGVfbGlua3MgPSB0cnVlO1xuICAgICAgICAgICAgcGF5bG9hZC5nZXRJdGVtc1BhcmFtZXRlcnMuZm9ybWF0ID0gJ21hcCc7XG4gICAgICAgICAgICBjb25zdCByZXMgPSB5aWVsZCBJdGVtLnJlcXVlc3QoaXRlbV8xLkRTX0lURU1TLCBwYXlsb2FkKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiByZXMuZGF0YXN0b3JlR2V0RGF0YXN0b3JlSXRlbXMuaXRlbXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWl0ZW0uaXRlbV9saW5rcyB8fCAhaXRlbS5pdGVtX2xpbmtzLmxpbmtzIHx8IGl0ZW0uaXRlbV9saW5rcy5sZW5ndGggPT09IDApXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbGluayBvZiBpdGVtLml0ZW1fbGlua3MubGlua3MpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFsaW5rLmRfaWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZCA9IHlpZWxkIGRhdGFzdG9yZS5wcm9qZWN0LmRhdGFzdG9yZShsaW5rLmRfaWQpO1xuICAgICAgICAgICAgICAgICAgICB5aWVsZCBkLmZpZWxkcygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gcmVzLmRhdGFzdG9yZUdldERhdGFzdG9yZUl0ZW1zLml0ZW1zXG4gICAgICAgICAgICAgICAgLm1hcCgocGFyYW1zKSA9PiBJdGVtLmZyb21Kc29uKE9iamVjdC5hc3NpZ24oeyBkYXRhc3RvcmUgfSwgcGFyYW1zKSkpO1xuICAgICAgICAgICAgY29uc3QgdG90YWxDb3VudCA9IHJlcy5kYXRhc3RvcmVHZXREYXRhc3RvcmVJdGVtcy50b3RhbEl0ZW1zO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0b3RhbENvdW50LCBpdGVtcyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdGF0aWMgc2VhcmNoKHBheWxvYWQsIGRhdGFzdG9yZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXlsb2FkLnBhZ2UgPT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgICAgIHBheWxvYWQucGFnZSA9IDE7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBheWxvYWQucGVyX3BhZ2UgPT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgICAgIHBheWxvYWQucGVyX3BhZ2UgPSAxMDA7XG4gICAgICAgICAgICBwYXlsb2FkLmluY2x1ZGVfbG9va3VwcyA9IHRydWU7XG4gICAgICAgICAgICBwYXlsb2FkLmluY2x1ZGVfbGlua3MgPSB0cnVlO1xuICAgICAgICAgICAgcGF5bG9hZC5yZXR1cm5fbnVtYmVyX3ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgIHBheWxvYWQuaW5jbHVkZV9maWVsZHNfZGF0YSA9IHRydWU7XG4gICAgICAgICAgICBwYXlsb2FkLmZvcm1hdCA9ICdtYXAnO1xuICAgICAgICAgICAgY29uc3QgcmVzID0geWllbGQgdGhpcy5yZXF1ZXN0KGl0ZW1fMS5JVEVNX1dJVEhfU0VBUkNILCB7IHBheWxvYWQgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzLml0ZW1XaXRoU2VhcmNoLml0ZW1zLm1hcCgocGFyYW1zKSA9PiBJdGVtLmZyb21Kc29uKE9iamVjdC5hc3NpZ24oeyBkYXRhc3RvcmUgfSwgcGFyYW1zKSkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIHNlYXJjaFdpdGhDb3VudChwYXlsb2FkLCBkYXRhc3RvcmUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGF5bG9hZC5wYWdlID09PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgICAgICBwYXlsb2FkLnBhZ2UgPSAxO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXlsb2FkLnBlcl9wYWdlID09PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgICAgICBwYXlsb2FkLnBlcl9wYWdlID0gMTAwO1xuICAgICAgICAgICAgcGF5bG9hZC5pbmNsdWRlX2xvb2t1cHMgPSB0cnVlO1xuICAgICAgICAgICAgcGF5bG9hZC5pbmNsdWRlX2xpbmtzID0gdHJ1ZTtcbiAgICAgICAgICAgIHBheWxvYWQucmV0dXJuX251bWJlcl92YWx1ZSA9IHRydWU7XG4gICAgICAgICAgICBwYXlsb2FkLmluY2x1ZGVfZmllbGRzX2RhdGEgPSB0cnVlO1xuICAgICAgICAgICAgcGF5bG9hZC5mb3JtYXQgPSAnbWFwJztcbiAgICAgICAgICAgIHBheWxvYWQudXNlX2Rpc3BsYXlfaWQgPSB0cnVlO1xuICAgICAgICAgICAgcGF5bG9hZC5kYXRhc3RvcmVfaWQgPSBkYXRhc3RvcmUuaWQ7XG4gICAgICAgICAgICBwYXlsb2FkLnByb2plY3RfaWQgPSBkYXRhc3RvcmUucHJvamVjdC5pZDtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IHlpZWxkIHRoaXMucmVxdWVzdChpdGVtXzEuSVRFTV9XSVRIX1NFQVJDSCwgeyBwYXlsb2FkIH0pO1xuICAgICAgICAgICAgY29uc3QgaXRlbXMgPSByZXMuaXRlbVdpdGhTZWFyY2guaXRlbXMubWFwKChwYXJhbXMpID0+IEl0ZW0uZnJvbUpzb24oT2JqZWN0LmFzc2lnbih7IGRhdGFzdG9yZSB9LCBwYXJhbXMpKSk7XG4gICAgICAgICAgICBjb25zdCB0b3RhbENvdW50ID0gcmVzLml0ZW1XaXRoU2VhcmNoLnRvdGFsSXRlbXM7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRvdGFsQ291bnQsIGl0ZW1zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBjcmVhdGVJdGVtSWQoZGF0YXN0b3JlKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSB5aWVsZCB0aGlzLnJlcXVlc3QoaXRlbV8xLkNSRUFURV9JVEVNSUQsIHsgZGF0YXN0b3JlSWQ6IGRhdGFzdG9yZS5pZCB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXMuZGF0YXN0b3JlQ3JlYXRlSXRlbUlELml0ZW1faWQ7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdGF0aWMgZGVsZXRlKGNvbmRpdGlvbnMsIGRhdGFzc3RvcmUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBwcm9qZWN0SWQ6IGRhdGFzc3RvcmUucHJvamVjdC5pZCxcbiAgICAgICAgICAgICAgICBkYXRhc3RvcmVJZDogZGF0YXNzdG9yZS5pZCxcbiAgICAgICAgICAgICAgICBkZWxldGVJdGVtc1BhcmFtZXRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgdXNlX2Rpc3BsYXlfaWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbnMsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IHlpZWxkIHRoaXMucmVxdWVzdChpdGVtXzEuREVMRVRFX0lURU1TLCBwYXJhbXMpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5kYXRhc3RvcmVEZWxldGVEYXRhc3RvcmVJdGVtcy5zdWNjZXNzO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2F2ZShjb21tZW50LCBhY3Rpb25OYW1lKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCAoIXRoaXMuaWQgPyB0aGlzLmNyZWF0ZShhY3Rpb25OYW1lKSA6IHRoaXMudXBkYXRlKGNvbW1lbnQsIGFjdGlvbk5hbWUpKTtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuZmV0Y2goKTtcbiAgICAgICAgICAgIHlpZWxkIFByb21pc2UuYWxsKHRoaXMuX2xpbmtJdGVtcy5tYXAobGlua0l0ZW0gPT4gbGlua0l0ZW0uY3JlYXRlKCkpKTtcbiAgICAgICAgICAgIHlpZWxkIFByb21pc2UuYWxsKHRoaXMuX3VubGlua0l0ZW1zLm1hcChsaW5rSXRlbSA9PiBsaW5rSXRlbS5kZWxldGUoKSkpO1xuICAgICAgICAgICAgdGhpcy5fbGlua0l0ZW1zID0gW107XG4gICAgICAgICAgICB0aGlzLl91bmxpbmtJdGVtcyA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBsaW5rKGl0ZW0pIHtcbiAgICAgICAgdGhpcy5fbGlua0l0ZW1zLnB1c2gobmV3IGxpbmtJdGVtXzEuZGVmYXVsdCh7IGl0ZW06IHRoaXMsIGxpbmtlZEl0ZW06IGl0ZW0gfSkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdW5saW5rKGl0ZW0pIHtcbiAgICAgICAgdGhpcy5fdW5saW5rSXRlbXMucHVzaChuZXcgbGlua0l0ZW1fMS5kZWZhdWx0KHsgaXRlbTogdGhpcywgbGlua2VkSXRlbTogaXRlbSB9KSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBjcmVhdGUoYWN0aW9uTmFtZSA9ICdDcmVhdGVJdGVtJykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmRhdGFzdG9yZSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFzdG9yZSBpcyByZXF1aXJlZCcpO1xuICAgICAgICAgICAgY29uc3QgYWN0aW9uID0geWllbGQgdGhpcy5hY3Rpb25PclN0YXR1c0FjdGlvbihhY3Rpb25OYW1lKTtcbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uX2lkOiBhY3Rpb24gJiYgYWN0aW9uLmlkLFxuICAgICAgICAgICAgICAgIHJldHVybl9pdGVtX3Jlc3VsdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpc19ub3RpZnlfdG9fc2VuZGVyOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVuc3VyZV90cmFuc2FjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgZXhlY19jaGlsZHJlbl9wb3N0X3Byb2NzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGl0ZW06IHlpZWxkIHRoaXMudG9Kc29uKCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzID0geWllbGQgdGhpcy5yZXF1ZXN0KGl0ZW1fMS5DUkVBVEVfTkVXX0lURU0sIHtcbiAgICAgICAgICAgICAgICBwcm9qZWN0SWQ6IHRoaXMuZGF0YXN0b3JlLnByb2plY3QuaWQsXG4gICAgICAgICAgICAgICAgZGF0YXN0b3JlSWQ6IHRoaXMuZGF0YXN0b3JlLmlkLFxuICAgICAgICAgICAgICAgIHBheWxvYWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGFzdG9yZS5fZmllbGRzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLmRhdGFzdG9yZS5maWVsZHMoKTtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHt9O1xuICAgICAgICAgICAgT2JqZWN0LmtleXMocmVzLmRhdGFzdG9yZUNyZWF0ZU5ld0l0ZW0uaXRlbSkuZm9yRWFjaCgoaWQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZCA9IHRoaXMuZGF0YXN0b3JlLl9maWVsZHMuZmluZCgoZikgPT4gZi5pZCA9PT0gaWQgfHwgZi5kaXNwbGF5SWQgPT09IGlkKTtcbiAgICAgICAgICAgICAgICBpZiAoIWZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtc1tpZF0gPSByZXMuZGF0YXN0b3JlQ3JlYXRlTmV3SXRlbS5pdGVtW2lkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtc1tmaWVsZC5kaXNwbGF5SWRdID0gcmVzLmRhdGFzdG9yZUNyZWF0ZU5ld0l0ZW0uaXRlbVtpZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXBhcmFtc1trZXldLmRfaWQpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFzdG9yZSA9IHRoaXMuZGF0YXN0b3JlLnByb2plY3QuZGF0YXN0b3JlU3luYyhwYXJhbXNba2V5XS5kX2lkKTtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YXN0b3JlKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtc1trZXldID0geWllbGQgZGF0YXN0b3JlLml0ZW0ocGFyYW1zW2tleV0uaXRlbV9pZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZXRzKHBhcmFtcyk7XG4gICAgICAgICAgICB0aGlzLl9zZXRTdGF0dXModGhpcy5fc3RhdHVzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9leGlzdEF0dGFjaG1lbnQpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2V4aXN0QXR0YWNobWVudCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBleGVjdXRlKGFjdGlvbk5hbWUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGFjdGlvbiA9IHlpZWxkIHRoaXMuYWN0aW9uT3JTdGF0dXNBY3Rpb24oYWN0aW9uTmFtZSk7XG4gICAgICAgICAgICBpZiAoIWFjdGlvbilcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEFjdGlvbiAke2FjdGlvbk5hbWV9IG5vdCBmb3VuZGApO1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHJldl9ubzogdGhpcy5yZXZObyxcbiAgICAgICAgICAgICAgICBkYXRhc3RvcmVfaWQ6IHRoaXMuZGF0YXN0b3JlLmlkLFxuICAgICAgICAgICAgICAgIGFjdGlvbl9pZDogYWN0aW9uICYmIGFjdGlvbi5pZCxcbiAgICAgICAgICAgICAgICBpc19ub3RpZnlfdG9fc2VuZGVyOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVuc3VyZV90cmFuc2FjdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBleGVjX2NoaWxkcmVuX3Bvc3RfcHJvY3M6IHRydWUsXG4gICAgICAgICAgICAgICAgcmV0dXJuX2l0ZW1fcmVzdWx0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGl0ZW06IHlpZWxkIHRoaXMudG9Kc29uKCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzID0geWllbGQgdGhpcy5yZXF1ZXN0KGl0ZW1fMS5FWEVDVVRFX0lURU1fQUNUSU9OLCB7XG4gICAgICAgICAgICAgICAgYWN0aW9uSWQ6IGFjdGlvbi5pZCxcbiAgICAgICAgICAgICAgICBkYXRhc3RvcmVJZDogdGhpcy5kYXRhc3RvcmUuaWQsXG4gICAgICAgICAgICAgICAgaXRlbUlkOiB0aGlzLmlkLFxuICAgICAgICAgICAgICAgIHByb2plY3RJZDogdGhpcy5kYXRhc3RvcmUucHJvamVjdC5pZCxcbiAgICAgICAgICAgICAgICBpdGVtQWN0aW9uUGFyYW1ldGVyczogcGFyYW1zXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuc2V0cyhyZXMuZGF0YXN0b3JlRXhlY3V0ZUl0ZW1BY3Rpb24uaXRlbSk7XG4gICAgICAgICAgICB0aGlzLl9zZXRTdGF0dXModGhpcy5fc3RhdHVzKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYWN0aW9uT3JTdGF0dXNBY3Rpb24oYWN0aW9uTmFtZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgYWN0aW9uID0geWllbGQgdGhpcy5hY3Rpb24oYWN0aW9uTmFtZSk7XG4gICAgICAgICAgICBpZiAoYWN0aW9uKVxuICAgICAgICAgICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnN0YXR1c0FjdGlvbnMpO1xuICAgICAgICAgICAgY29uc3Qgc3RhdHVzQWN0aW9uID0gdGhpcy5zdGF0dXNBY3Rpb25zLmZpbmQoYSA9PiBhLmRpc3BsYXlJZCA9PT0gYWN0aW9uTmFtZSB8fCBhLmlkID09PSBhY3Rpb25OYW1lIHx8IGEubmFtZSA9PT0gYWN0aW9uTmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gc3RhdHVzQWN0aW9uO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgdXBkYXRlKGNvbW1lbnQsIGFjdGlvbk5hbWUgPSAnVXBkYXRlSXRlbScpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGFjdGlvbiA9IHlpZWxkIHRoaXMuYWN0aW9uT3JTdGF0dXNBY3Rpb24oYWN0aW9uTmFtZSk7XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgcmV2X25vOiB0aGlzLnJldk5vLFxuICAgICAgICAgICAgICAgIGRhdGFzdG9yZV9pZDogdGhpcy5kYXRhc3RvcmUuaWQsXG4gICAgICAgICAgICAgICAgYWN0aW9uX2lkOiBhY3Rpb24gJiYgYWN0aW9uLmlkLFxuICAgICAgICAgICAgICAgIGlzX25vdGlmeV90b19zZW5kZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgZW5zdXJlX3RyYW5zYWN0aW9uOiB0cnVlLFxuICAgICAgICAgICAgICAgIGV4ZWNfY2hpbGRyZW5fcG9zdF9wcm9jczogdHJ1ZSxcbiAgICAgICAgICAgICAgICByZXR1cm5faXRlbV9yZXN1bHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgaXRlbTogeWllbGQgdGhpcy50b0pzb24oKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoY29tbWVudCkge1xuICAgICAgICAgICAgICAgIHBhcmFtcy5oaXN0b3J5ID0ge1xuICAgICAgICAgICAgICAgICAgICBjb21tZW50LFxuICAgICAgICAgICAgICAgICAgICBkYXRhc3RvcmVfaWQ6IHRoaXMuZGF0YXN0b3JlLmlkLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXMgPSB5aWVsZCB0aGlzLnJlcXVlc3QoaXRlbV8xLkRBVEFTVE9SRV9VUERBVEVfSVRFTSwge1xuICAgICAgICAgICAgICAgIGRhdGFzdG9yZUlkOiB0aGlzLmRhdGFzdG9yZS5pZCxcbiAgICAgICAgICAgICAgICBpdGVtSWQ6IHRoaXMuaWQsXG4gICAgICAgICAgICAgICAgcHJvamVjdElkOiB0aGlzLmRhdGFzdG9yZS5wcm9qZWN0LmlkLFxuICAgICAgICAgICAgICAgIGl0ZW1BY3Rpb25QYXJhbWV0ZXJzOiBwYXJhbXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5zZXRzKHJlcy5kYXRhc3RvcmVVcGRhdGVJdGVtLml0ZW0pO1xuICAgICAgICAgICAgdGhpcy5fc2V0U3RhdHVzKHRoaXMuX3N0YXR1cyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHRvSnNvbigpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGpzb24gPSB7fTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuZmllbGRzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmllbGQgPSB0aGlzLmRhdGFzdG9yZS5maWVsZFN5bmMoa2V5KTtcbiAgICAgICAgICAgICAgICBpZiAoIWZpZWxkKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZpZWxkICR7a2V5fSBpcyBub3QgZm91bmRgKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaWQgJiYgZmllbGQuZGF0YVR5cGUgPT09IGZpZWxkXzEuRGF0YVR5cGUuRklMRSAmJiB0aGlzLmZpZWxkc1trZXldICYmIHRoaXMuZmllbGRzW2tleV0ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlcyA9IHRoaXMuZmllbGRzW2tleV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBmaWxlcy5maW5kKGYgPT4gIWYuaWQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXhpc3RBdHRhY2htZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0geWllbGQgZmllbGQuY29udmVydCh0aGlzLmZpZWxkc1trZXldKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLmZpZWxkc1trZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIGpzb25ba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBqc29uO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdHVzKHN0YXR1cykge1xuICAgICAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgICAgICBjb25zdCBzdGF0dXNBY3Rpb24gPSB0aGlzLnN0YXR1c0FjdGlvbnMuZmluZChhY3Rpb24gPT4gYWN0aW9uLmRpc3BsYXlJZCA9PT0gc3RhdHVzKTtcbiAgICAgICAgICAgIGlmICghc3RhdHVzQWN0aW9uKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU3RhdHVzIGFjdGlvbiBpcyBub3QgZm91bmQnKTtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVN0YXR1c0FjdGlvbiA9IHN0YXR1c0FjdGlvbjtcbiAgICAgICAgICAgIGNvbnN0IG5ld1N0YXR1cyA9IHRoaXMuc3RhdHVzZXMuZmluZChzID0+IHMuaWQgPT09IHN0YXR1c0FjdGlvbi5uZXh0U3RhdHVzSWQpO1xuICAgICAgICAgICAgaWYgKCFuZXdTdGF0dXMpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTdGF0dXMgaXMgbm90IGZvdW5kICR7c3RhdHVzQWN0aW9uLm5leHRTdGF0dXNJZH1gKTtcbiAgICAgICAgICAgIHRoaXMuX3NldFN0YXR1cyhuZXdTdGF0dXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0dXMuZGlzcGxheUlkO1xuICAgIH1cbiAgICBmZXRjaCgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBkYXRhc3RvcmVJZDogdGhpcy5kYXRhc3RvcmUuaWQsXG4gICAgICAgICAgICAgICAgaXRlbUlkOiB0aGlzLmlkLFxuICAgICAgICAgICAgICAgIHByb2plY3RJZDogdGhpcy5kYXRhc3RvcmUucHJvamVjdC5pZCxcbiAgICAgICAgICAgICAgICBkYXRhc3RvcmVJdGVtRGV0YWlsUGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgIGluY2x1ZGVfbG9va3VwczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdXNlX2Rpc3BsYXlfaWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHJldHVybl9udW1iZXJfdmFsdWU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdDogJ21hcCcsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1ZGVfbGlua2VkX2l0ZW1zOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzID0geWllbGQgdGhpcy5yZXF1ZXN0KGl0ZW1fMS5JVEVNX0RFVEFJTCwgcGFyYW1zKTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHJlcy5nZXREYXRhc3RvcmVJdGVtRGV0YWlscy5maWVsZF92YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZCA9IHJlcy5nZXREYXRhc3RvcmVJdGVtRGV0YWlscy5maWVsZF92YWx1ZXNba2V5XTtcbiAgICAgICAgICAgICAgICBpZiAoZmllbGQuZGF0YVR5cGUgIT09ICdkc2xvb2t1cCcgfHwgIWZpZWxkLnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLmRhdGFzdG9yZS5wcm9qZWN0LmRhdGFzdG9yZShmaWVsZC52YWx1ZS5kX2lkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0cyhyZXMuZ2V0RGF0YXN0b3JlSXRlbURldGFpbHMpO1xuICAgICAgICAgICAgdGhpcy5fc2V0U3RhdHVzKHRoaXMuX3N0YXR1cyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGRlbGV0ZSgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGFjdGlvbiA9IHlpZWxkIHRoaXMuYWN0aW9uKCdEZWxldGVJdGVtJyk7XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgYV9pZDogYWN0aW9uLmlkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IHlpZWxkIHRoaXMucmVxdWVzdChpdGVtXzEuREVMRVRFX0lURU0sIHtcbiAgICAgICAgICAgICAgICBkYXRhc3RvcmVJZDogdGhpcy5kYXRhc3RvcmUuaWQsXG4gICAgICAgICAgICAgICAgaXRlbUlkOiB0aGlzLmlkLFxuICAgICAgICAgICAgICAgIHByb2plY3RJZDogdGhpcy5kYXRhc3RvcmUucHJvamVjdC5pZCxcbiAgICAgICAgICAgICAgICBkZWxldGVJdGVtUmVxOiBwYXJhbXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiAhcmVzLmRhdGFzdG9yZURlbGV0ZUl0ZW0uZXJyb3I7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhY3Rpb24oYWN0aW9uTmFtZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlnbm9yZUZpZWxkVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLmZldGNoKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5pZ25vcmVGaWVsZFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWN0aW9ucy5maW5kKGEgPT4gYS5kaXNwbGF5SWQudHJpbSgpLnRvTG93ZXJDYXNlKCkgPT09IGFjdGlvbk5hbWUudHJpbSgpLnRvTG9jYWxlTG93ZXJDYXNlKCkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29tbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBpdGVtSGlzdG9yeV8xLmRlZmF1bHQoeyBpdGVtOiB0aGlzIH0pO1xuICAgIH1cbiAgICBfc2V0U3RhdHVzKHN0YXR1cykge1xuICAgICAgICBpZiAodGhpcy5zdGF0dXNlcy5sZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh0eXBlb2Ygc3RhdHVzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uc3Qgc3RhdHVzTmFtZSA9IE9iamVjdC5rZXlzKHRoaXMuZmllbGRzKS5maW5kKGZpZWxkTmFtZSA9PiB0aGlzLmRhdGFzdG9yZS5maWVsZFN5bmMoZmllbGROYW1lKS5kYXRhVHlwZSA9PT0gJ3N0YXR1cycpO1xuICAgICAgICAgICAgaWYgKHN0YXR1c05hbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0dXMgPSB0aGlzLnN0YXR1c2VzLmZpbmQoc3RhdHVzID0+IHN0YXR1cy5pZCA9PT0gdGhpcy5maWVsZHNbc3RhdHVzTmFtZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZmllbGRzW3N0YXR1c05hbWVdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3RhdHVzID0gc3RhdHVzO1xuICAgICAgICB9XG4gICAgfVxuICAgIGhpc3RvcmllcyhnZXRIaXN0b3J5UGFyYW1RdWVyaWVzKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSB5aWVsZCB0aGlzLmhpc3Rvcmllc1dpdGhVbnJlYWQoKTtcbiAgICAgICAgICAgIHJldHVybiByZXMuaGlzdG9yaWVzO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaGlzdG9yaWVzV2l0aFVucmVhZChnZXRIaXN0b3J5UGFyYW1RdWVyaWVzKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgcHJvamVjdElkOiB0aGlzLmRhdGFzdG9yZS5wcm9qZWN0LmlkLFxuICAgICAgICAgICAgICAgIGRhdGFzdG9yZUlkOiB0aGlzLmRhdGFzdG9yZS5pZCxcbiAgICAgICAgICAgICAgICBpdGVtSWQ6IHRoaXMuaWQsXG4gICAgICAgICAgICAgICAgZ2V0SGlzdG9yeVBhcmFtUXVlcmllcyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXMgPSB5aWVsZCB0aGlzLnJlcXVlc3QoaXRlbV8xLklURU1fSElTVE9SSUVTLCBwYXJhbXMpO1xuICAgICAgICAgICAgY29uc3QgaGlzdG9yaWVzID0gcmVzLmdldEhpc3Rvcmllcy5oaXN0b3JpZXNcbiAgICAgICAgICAgICAgICAubWFwKChoaXN0b3J5KSA9PiBpdGVtSGlzdG9yeV8xLmRlZmF1bHQuZnJvbUpzb24oT2JqZWN0LmFzc2lnbih7IGl0ZW06IHRoaXMgfSwgaGlzdG9yeSkpKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdW5yZWFkOiByZXMuZ2V0SGlzdG9yaWVzLnVucmVhZCxcbiAgICAgICAgICAgICAgICBoaXN0b3JpZXMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGlua3MobGlua2VkRGF0YXN0b3JlKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSB5aWVsZCB0aGlzLnJlcXVlc3QoaXRlbV8xLklURU1fTElOS0VELCB7XG4gICAgICAgICAgICAgICAgZGF0YXN0b3JlSWQ6IHRoaXMuZGF0YXN0b3JlLmlkLFxuICAgICAgICAgICAgICAgIGl0ZW1JZDogdGhpcy5pZCxcbiAgICAgICAgICAgICAgICBsaW5rZWREYXRhc3RvcmVJZDogdHlwZW9mIGxpbmtlZERhdGFzdG9yZSA9PT0gJ3N0cmluZycgPyBsaW5rZWREYXRhc3RvcmUgOiBsaW5rZWREYXRhc3RvcmUuaWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChyZXMuZGF0YXN0b3JlR2V0TGlua2VkSXRlbXMuaXRlbXMubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3RzID0geWllbGQgSXRlbS5jbGllbnQuY3VycmVudFdvcmtzcGFjZS5wcm9qZWN0cygpO1xuICAgICAgICAgICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcGFyYW1zIG9mIHJlcy5kYXRhc3RvcmVHZXRMaW5rZWRJdGVtcy5pdGVtcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb2plY3QgPSBwcm9qZWN0cy5maW5kKHAgPT4gcC5pZCA9PT0gcGFyYW1zLnBfaWQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFzdG9yZSA9IHR5cGVvZiBsaW5rZWREYXRhc3RvcmUgPT09ICdzdHJpbmcnID8geWllbGQgcHJvamVjdC5kYXRhc3RvcmUocGFyYW1zLmRfaWQpIDogbGlua2VkRGF0YXN0b3JlO1xuICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goeWllbGQgZGF0YXN0b3JlLml0ZW0ocGFyYW1zLmlfaWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHlpZWxkIFByb21pc2UuYWxsKGl0ZW1zLm1hcCgoaXRlbSkgPT4gaXRlbS5mZXRjaCgpKSk7XG4gICAgICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmaWxlKCkge1xuICAgICAgICByZXR1cm4gbmV3IGZpbGVPYmplY3RfMS5kZWZhdWx0KHsgaXRlbTogdGhpcyB9KTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBJdGVtO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../Code/Hexabase/hexabase-js/dist/lib/packages/item/index.js\n"));

/***/ })

});