"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "../../Code/Hexabase/hexabase-js/dist/lib/packages/item/index.js":
/*!***********************************************************************!*\
  !*** ../../Code/Hexabase/hexabase-js/dist/lib/packages/item/index.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst HxbAbstract_1 = __webpack_require__(/*! ../../../HxbAbstract */ \"../../Code/Hexabase/hexabase-js/dist/HxbAbstract.js\");\nconst item_1 = __webpack_require__(/*! ../../graphql/item */ \"../../Code/Hexabase/hexabase-js/dist/lib/graphql/item.js\");\nconst itemHistory_1 = __importDefault(__webpack_require__(/*! ../itemHistory */ \"../../Code/Hexabase/hexabase-js/dist/lib/packages/itemHistory/index.js\"));\nconst itemAction_1 = __importDefault(__webpack_require__(/*! ../itemAction */ \"../../Code/Hexabase/hexabase-js/dist/lib/packages/itemAction/index.js\"));\nconst itemStatus_1 = __importDefault(__webpack_require__(/*! ../itemStatus */ \"../../Code/Hexabase/hexabase-js/dist/lib/packages/itemStatus/index.js\"));\nconst statusAction_1 = __importDefault(__webpack_require__(/*! ../statusAction */ \"../../Code/Hexabase/hexabase-js/dist/lib/packages/statusAction/index.js\"));\nconst linkItem_1 = __importDefault(__webpack_require__(/*! ../linkItem */ \"../../Code/Hexabase/hexabase-js/dist/lib/packages/linkItem/index.js\"));\nconst fileObject_1 = __importDefault(__webpack_require__(/*! ../fileObject */ \"../../Code/Hexabase/hexabase-js/dist/lib/packages/fileObject/index.js\"));\nconst field_1 = __webpack_require__(/*! ../../../lib/types/field */ \"../../Code/Hexabase/hexabase-js/dist/lib/types/field/index.js\");\nclass Item extends HxbAbstract_1.HxbAbstract {\n    constructor() {\n        super(...arguments);\n        this.fields = {};\n        this.actions = [];\n        this.statuses = [];\n        this.statusActions = [];\n        this._existAttachment = false;\n        this._linkItems = [];\n        this._unlinkItems = [];\n        this._detail = false;\n        this.ignoreFieldUpdate = false;\n    }\n    set(key, value) {\n        switch (key) {\n            case 'datastore':\n                this.datastore = value;\n                break;\n            case 'd_id':\n                break;\n            case 'links': {\n                const project = this.datastore.project;\n                value.forEach(params => {\n                    const datasstore = project.datastoreSync(params.d_id);\n                    params.i_ids\n                        .forEach(i_id => {\n                        const linkedItem = Item.fromJson({ datastore: datasstore, i_id: i_id });\n                        this._linkItems.push(new linkItem_1.default({ item: this, linkedItem, saved: true }));\n                    });\n                });\n                break;\n            }\n            case 'item_links': {\n                if (value.item_count === 0)\n                    break;\n                const project = this.datastore.project;\n                value.links.forEach(params => {\n                    const datastore = project.datastoreSync(params.d_id);\n                    params.items.forEach(itemParams => {\n                        const linkedItem = Item.fromJson({ datastore, i_id: itemParams.i_id });\n                        this._linkItems.push(new linkItem_1.default({ item: this, linkedItem, saved: true }));\n                    });\n                });\n                break;\n            }\n            case 'pinned':\n                this.pinned = value;\n                break;\n            case 'a_id':\n            case 'p_id':\n                break;\n            case 'created_at':\n                this.createdAt = new Date(value);\n                break;\n            case 'updated_at':\n                this.updatedAt = new Date(value);\n                break;\n            case 'rev_no':\n                this.revNo = value;\n                break;\n            case 'unread':\n                this.unread = value;\n                break;\n            case 'w_id':\n                break;\n            case 'i_id':\n                if (value) {\n                    this.id = value;\n                }\n                break;\n            case 'seed_i_id':\n                this.seedItemId = value;\n                break;\n            case 'Status':\n                this.statusLabel = value;\n                break;\n            case 'status_id':\n                this.statusId = value;\n                break;\n            case 'title':\n                this.title = value;\n                break;\n            case 'created_by':\n                this.createdBy = value;\n                break;\n            case 'updated_by':\n                this.updatedBy = value;\n                break;\n            case 'lookup_items':\n                break;\n            case 'item_actions':\n                this.actions = Object.keys(value)\n                    .map((display_id) => itemAction_1.default\n                    .fromJson(Object.assign(Object.assign({ display_id }, value[display_id]), { item: this })));\n                break;\n            case 'status_list':\n                this.statuses = Object.keys(value)\n                    .map((display_id) => itemStatus_1.default\n                    .fromJson(Object.assign(Object.assign({ display_id }, value[display_id]), { item: this })));\n                break;\n            case 'status_actions':\n                this.statusActions = Object.keys(value)\n                    .map((display_id) => statusAction_1.default\n                    .fromJson(Object.assign(Object.assign({ display_id }, value[display_id]), { item: this })));\n                break;\n            case 'status_order':\n                this.statusOrder = value;\n                break;\n            case 'status_action_order':\n                this.statusActionOrder = value;\n                break;\n            case 'item_action_order':\n                this.itemActionOrder = value;\n                break;\n            case 'field_values':\n                Object.keys(value).forEach(fieldName => {\n                    const val = value[fieldName];\n                    if (val.dataType === field_1.DataType.DSLOOKUP && val.value) {\n                        const datastore = this.datastore.project.datastoreSync(val.value.d_id);\n                        const params = val.value.lookup_item;\n                        params.datastore = datastore;\n                        const item = Item.fromJson(params);\n                        this.fields[fieldName] = item;\n                    }\n                    else {\n                        this.setFieldValue(fieldName, val.value);\n                    }\n                });\n                break;\n            default:\n                this.setFieldValue(key, value);\n                break;\n        }\n        return this;\n    }\n    add(fieldName, value) {\n        if (Array.isArray(value))\n            return this.addAll(fieldName, value);\n        if (this.ignoreFieldUpdate)\n            return this;\n        const field = this.datastore.fieldSync(fieldName);\n        if (!field.valid(value)) {\n            throw new Error(`Invalid value ${value} for field key ${field.name}`);\n        }\n        if (this.fields[fieldName]) {\n            this.fields[fieldName].push(field.value(value, { item: this })[0]);\n        }\n        else {\n            this.fields[fieldName] = [field.value(value, { item: this })];\n        }\n        return this;\n    }\n    addAll(fieldName, values) {\n        values.forEach(value => this.add(fieldName, value));\n        return this;\n    }\n    setFieldValue(fieldName, value) {\n        if (this.ignoreFieldUpdate)\n            return this;\n        const field = this.datastore.fieldSync(fieldName);\n        if (!field.valid(value)) {\n            throw new Error(`Invalid value ${value} for field key ${field.name}`);\n        }\n        value = field.value(value, { item: this });\n        if (field.dataType.toLocaleLowerCase() === 'status') {\n            this._status = value;\n        }\n        this.fields[field.displayId] = value;\n        return this;\n    }\n    get(name, defaultValue) {\n        const value = this.fields[name] && this.fields[name].field ? this.fields[name].value : this.fields[name];\n        if (value === undefined || value === null && defaultValue) {\n            return defaultValue;\n        }\n        if (!value)\n            return undefined;\n        return value;\n    }\n    static all(params, datastore) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const payload = {\n                getItemsParameters: params,\n                datastoreId: datastore.id,\n                projectId: datastore.project.id,\n            };\n            payload.getItemsParameters.return_number_value = true;\n            payload.getItemsParameters.include_links = true;\n            payload.getItemsParameters.format = 'map';\n            const res = yield Item.request(item_1.DS_ITEMS, payload);\n            for (const item of res.datastoreGetDatastoreItems.items) {\n                if (!item.item_links || !item.item_links.links || item.item_links.length === 0)\n                    continue;\n                for (const link of item.item_links.links) {\n                    if (!link.d_id)\n                        continue;\n                    const d = yield datastore.project.datastore(link.d_id);\n                    yield d.fields();\n                }\n            }\n            const items = res.datastoreGetDatastoreItems.items\n                .map((params) => Item.fromJson(Object.assign({ datastore }, params)));\n            const totalCount = res.datastoreGetDatastoreItems.totalItems;\n            return {\n                totalCount, items,\n            };\n        });\n    }\n    static search(payload, datastore) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof payload.page === 'undefined')\n                payload.page = 1;\n            if (typeof payload.per_page === 'undefined')\n                payload.per_page = 100;\n            payload.include_lookups = true;\n            payload.include_links = true;\n            payload.return_number_value = true;\n            payload.include_fields_data = true;\n            payload.format = 'map';\n            const res = yield this.request(item_1.ITEM_WITH_SEARCH, { payload });\n            return res.itemWithSearch.items.map((params) => Item.fromJson(Object.assign({ datastore }, params)));\n        });\n    }\n    static searchWithCount(payload, datastore) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof payload.page === 'undefined')\n                payload.page = 1;\n            if (typeof payload.per_page === 'undefined')\n                payload.per_page = 100;\n            payload.include_lookups = true;\n            payload.include_links = true;\n            payload.return_number_value = true;\n            payload.include_fields_data = true;\n            payload.format = 'map';\n            payload.use_display_id = true;\n            payload.datastore_id = datastore.id;\n            payload.project_id = datastore.project.id;\n            const res = yield this.request(item_1.ITEM_WITH_SEARCH, { payload });\n            const items = res.itemWithSearch.items.map((params) => Item.fromJson(Object.assign({ datastore }, params)));\n            const totalCount = res.itemWithSearch.totalItems;\n            return {\n                totalCount, items,\n            };\n        });\n    }\n    static createItemId(datastore) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const res = yield this.request(item_1.CREATE_ITEMID, { datastoreId: datastore.id });\n            return res.datastoreCreateItemID.item_id;\n        });\n    }\n    static delete(conditions, datasstore) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                projectId: datasstore.project.id,\n                datastoreId: datasstore.id,\n                deleteItemsParameters: {\n                    use_display_id: true,\n                    conditions,\n                }\n            };\n            const res = yield this.request(item_1.DELETE_ITEMS, params);\n            return res.datastoreDeleteDatastoreItems.success;\n        });\n    }\n    save(comment, actionName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield (!this.id ? this.create(actionName) : this.update(comment, actionName));\n            yield this.fetch();\n            yield Promise.all(this._linkItems.map(linkItem => linkItem.create()));\n            yield Promise.all(this._unlinkItems.map(linkItem => linkItem.delete()));\n            this._linkItems = [];\n            this._unlinkItems = [];\n            return true;\n        });\n    }\n    link(item) {\n        this._linkItems.push(new linkItem_1.default({ item: this, linkedItem: item }));\n        return this;\n    }\n    unlink(item) {\n        this._unlinkItems.push(new linkItem_1.default({ item: this, linkedItem: item }));\n        return this;\n    }\n    create(actionName = 'CreateItem') {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.datastore)\n                throw new Error('Datastore is required');\n            const action = yield this.actionOrStatusAction(actionName);\n            const payload = {\n                action_id: action && action.id,\n                return_item_result: true,\n                is_notify_to_sender: true,\n                ensure_transaction: false,\n                exec_children_post_procs: true,\n                item: yield this.toJson(),\n            };\n            const res = yield this.request(item_1.CREATE_NEW_ITEM, {\n                projectId: this.datastore.project.id,\n                datastoreId: this.datastore.id,\n                payload,\n            });\n            if (this.datastore._fields.length === 0)\n                yield this.datastore.fields();\n            const params = {};\n            Object.keys(res.datastoreCreateNewItem.item).forEach((id) => {\n                const field = this.datastore._fields.find((f) => f.id === id || f.displayId === id);\n                if (!field) {\n                    params[id] = res.datastoreCreateNewItem.item[id];\n                }\n                else {\n                    params[field.displayId] = res.datastoreCreateNewItem.item[id];\n                }\n            });\n            for (const key in params) {\n                if (!params[key].d_id)\n                    continue;\n                const datastore = this.datastore.project.datastoreSync(params[key].d_id);\n                if (datastore) {\n                    params[key] = yield datastore.item(params[key].item_id);\n                }\n            }\n            this.sets(params);\n            this._setStatus(this._status);\n            if (this._existAttachment) {\n                yield this.update();\n                this._existAttachment = false;\n            }\n            return true;\n        });\n    }\n    execute(actionName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const action = yield this.actionOrStatusAction(actionName);\n            if (!action)\n                throw new Error(`Action ${actionName} not found`);\n            const params = {\n                rev_no: this.revNo,\n                datastore_id: this.datastore.id,\n                action_id: action && action.id,\n                is_notify_to_sender: true,\n                ensure_transaction: true,\n                exec_children_post_procs: true,\n                return_item_result: true,\n                item: yield this.toJson(),\n            };\n            const res = yield this.request(item_1.EXECUTE_ITEM_ACTION, {\n                actionId: action.id,\n                datastoreId: this.datastore.id,\n                itemId: this.id,\n                projectId: this.datastore.project.id,\n                itemActionParameters: params\n            });\n            this.sets(res.datastoreExecuteItemAction.item);\n            this._setStatus(this._status);\n            return true;\n        });\n    }\n    actionOrStatusAction(actionName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const action = yield this.action(actionName);\n            if (action)\n                return action;\n            const statusAction = this.statusActions.find(a => a.displayId === actionName || a.id === actionName || a.name === actionName);\n            return statusAction;\n        });\n    }\n    update(comment, actionName = 'UpdateItem') {\n        return __awaiter(this, void 0, void 0, function* () {\n            const action = yield this.actionOrStatusAction(actionName);\n            const params = {\n                rev_no: this.revNo,\n                datastore_id: this.datastore.id,\n                action_id: action && action.id,\n                is_notify_to_sender: true,\n                ensure_transaction: true,\n                exec_children_post_procs: true,\n                return_item_result: true,\n                item: yield this.toJson(),\n            };\n            if (comment) {\n                params.history = {\n                    comment,\n                    datastore_id: this.datastore.id,\n                };\n            }\n            const res = yield this.request(item_1.DATASTORE_UPDATE_ITEM, {\n                datastoreId: this.datastore.id,\n                itemId: this.id,\n                projectId: this.datastore.project.id,\n                itemActionParameters: params\n            });\n            this.sets(res.datastoreUpdateItem.item);\n            this._setStatus(this._status);\n            return true;\n        });\n    }\n    toJson() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const json = {};\n            for (const key in this.fields) {\n                const field = this.datastore.fieldSync(key);\n                if (!field)\n                    throw new Error(`Field ${key} is not found`);\n                if (!this.id && field.dataType === field_1.DataType.FILE && this.fields[key] && this.fields[key].length > 0) {\n                    const files = this.fields[key];\n                    const file = files.find(f => !f.id);\n                    if (file) {\n                        this._existAttachment = true;\n                        continue;\n                    }\n                }\n                const value = yield field.convert(this.fields[key]);\n                if (typeof value !== 'undefined' && this.fields[key]) {\n                    json[key] = value;\n                }\n            }\n            return json;\n        });\n    }\n    status(status) {\n        if (status) {\n            const statusAction = this.statusActions.find(action => action.displayId === status);\n            if (!statusAction)\n                throw new Error('Status action is not found');\n            this._updateStatusAction = statusAction;\n            const newStatus = this.statuses.find(s => s.id === statusAction.nextStatusId);\n            if (!newStatus)\n                throw new Error(`Status is not found ${statusAction.nextStatusId}`);\n            this._setStatus(newStatus);\n        }\n        return this._status.displayId;\n    }\n    fetch() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                datastoreId: this.datastore.id,\n                itemId: this.id,\n                projectId: this.datastore.project.id,\n                datastoreItemDetailParams: {\n                    include_lookups: true,\n                    use_display_id: true,\n                    return_number_value: true,\n                    format: 'map',\n                    include_linked_items: true,\n                },\n            };\n            const res = yield this.request(item_1.ITEM_DETAIL, params);\n            for (const key in res.getDatastoreItemDetails.field_values) {\n                const field = res.getDatastoreItemDetails.field_values[key];\n                if (field.dataType !== 'dslookup' || !field.value)\n                    continue;\n                yield this.datastore.project.datastore(field.value.d_id);\n            }\n            this.sets(res.getDatastoreItemDetails);\n            this._setStatus(this._status);\n            return true;\n        });\n    }\n    delete() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const action = yield this.action('DeleteItem');\n            const params = {\n                a_id: action.id,\n            };\n            const res = yield this.request(item_1.DELETE_ITEM, {\n                datastoreId: this.datastore.id,\n                itemId: this.id,\n                projectId: this.datastore.project.id,\n                deleteItemReq: params,\n            });\n            return !res.datastoreDeleteItem.error;\n        });\n    }\n    action(actionName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.actions.length === 0) {\n                this.ignoreFieldUpdate = true;\n                yield this.fetch();\n                this.ignoreFieldUpdate = false;\n            }\n            return this.actions.find(a => a.displayId.trim().toLowerCase() === actionName.trim().toLocaleLowerCase());\n        });\n    }\n    comment() {\n        return new itemHistory_1.default({ item: this });\n    }\n    _setStatus(status) {\n        if (this.statuses.length === 0)\n            return;\n        if (typeof status === 'string') {\n            const statusName = Object.keys(this.fields).find(fieldName => this.datastore.fieldSync(fieldName).dataType === 'status');\n            if (statusName) {\n                this._status = this.statuses.find(status => status.id === this.fields[statusName]);\n            }\n            delete this.fields[statusName];\n        }\n        else {\n            this._status = status;\n        }\n    }\n    histories(getHistoryParamQueries) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const res = yield this.historiesWithUnread();\n            return res.histories;\n        });\n    }\n    historiesWithUnread(getHistoryParamQueries) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                projectId: this.datastore.project.id,\n                datastoreId: this.datastore.id,\n                itemId: this.id,\n                getHistoryParamQueries,\n            };\n            const res = yield this.request(item_1.ITEM_HISTORIES, params);\n            const histories = res.getHistories.histories\n                .map((history) => itemHistory_1.default.fromJson(Object.assign({ item: this }, history)));\n            return {\n                unread: res.getHistories.unread,\n                histories,\n            };\n        });\n    }\n    links(linkedDatastore) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const res = yield this.request(item_1.ITEM_LINKED, {\n                datastoreId: this.datastore.id,\n                itemId: this.id,\n                linkedDatastoreId: typeof linkedDatastore === 'string' ? linkedDatastore : linkedDatastore.id,\n            });\n            if (res.datastoreGetLinkedItems.items.length === 0)\n                return [];\n            const projects = yield Item.client.currentWorkspace.projects();\n            const items = [];\n            for (const params of res.datastoreGetLinkedItems.items) {\n                const project = projects.find(p => p.id === params.p_id);\n                const datastore = typeof linkedDatastore === 'string' ? yield project.datastore(params.d_id) : linkedDatastore;\n                items.push(yield datastore.item(params.i_id));\n            }\n            yield Promise.all(items.map((item) => item.fetch()));\n            return items;\n        });\n    }\n    file() {\n        return new fileObject_1.default({ item: this });\n    }\n}\nexports[\"default\"] = Item;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../Code/Hexabase/hexabase-js/dist/lib/packages/item/index.js\n"));

/***/ })

});